@model PrototypeTopCoder.Models.SimpleTestProblemModel

@{
    ViewBag.Title = "CreateSimpleTestProblem";
}

<h2>CreateSimpleTestProblem</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/tinymce/tiny_mce.js")" type="text/javascript"></script>
<script>
    var fileBrowser = function (fieldName, url, type, win) {
        var cmsURL = '@Url.Action("Index", "Upload")';
        if (cmsURL.indexOf("?") < 0) {
            //add the type as the only query parameter
            cmsURL = cmsURL + "?type=" + type;
        }
        else {
            //add the type as an additional query parameter
            // (PHP session ID is now included if there is one at all)
            cmsURL = cmsURL + "&type=" + type;
        }

        tinyMCE.activeEditor.windowManager.open({
            file: cmsURL,
            title: 'File Browser',
            width: 400,  // Your dimensions may differ - toy around with them!
            height: 300,
            resizable: "yes",
            inline: "yes",  // This parameter only has an effect if you use the inlinepopups plugin!
            close_previous: "no"
        }, {
            window: win,
            input: fieldName
        });
        return false;
    }

    tinyMCE.init({
        mode: 'textareas', file_browser_callback: fileBrowser, width: 400, height: 400, theme: 'advanced',
        theme_advanced_toolbar_location: "top",
        theme_advanced_toolbar_align: "left",
        theme_advanced_statusbar_location: "bottom",
        theme_advanced_resizing: true,
        plugins: 'inlinepopups',
        encoding: 'xml'
    });
</script>

@using (Html.BeginForm("CreateSimpleTestProblem","Admin", new {id = (string)Request.RequestContext.RouteData.Values["id"]})) {
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>SimpleTestProblemModel</legend>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.Title)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Title)
            @Html.ValidationMessageFor(model => model.Title)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Question)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Question)
            @Html.ValidationMessageFor(model => model.Question)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CorrectAnswer)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CorrectAnswer)
            @Html.ValidationMessageFor(model => model.CorrectAnswer)
        </div>

        @for (int i = 0; i < 4; i++)
        {
        <div class="editor-label">
            @Html.Label("Option " + i)
        </div>
        <div class="editor-field">
            @Html.TextBox("Options["+i+"]") 
        </div>
        }


        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
